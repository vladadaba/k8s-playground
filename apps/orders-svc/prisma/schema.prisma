// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status    OrderStatus[]
  cart      Json
  createdAt DateTime      @default(now())
}

model OrderStatus {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Order       Order           @relation(fields: [orderId], references: [id])
  orderId     String          @db.Uuid
  createdAt   DateTime        @default(now())
  status      OrderStatusEnum
  changedBy   User?           @relation(fields: [changedById], references: [id])
  changedById String?

  @@index([orderId])
}

enum OrderStatusEnum {
  WAITING_FOR_APPROVAL
  REJECTED
  APPROVED
  CANCELED
}

model OrderAssignment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assagnie   User?    @relation(fields: [assigneeId], references: [id])
  assigneeId String?
  createdAt  DateTime @default(now())
}

// materialized view from users-svc
model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  role            Role
  OrderAssignment OrderAssignment[]
  createdAt       DateTime
  updatedAt       DateTime
  isDeleted       Boolean
  OrderStatus     OrderStatus[]
}

enum Role {
  USER
  MANAGER
  ADMIN
}
